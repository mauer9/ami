import sys
import os
import time
import signal
import subprocess
import tempfile
import shutil
import re
import asyncio
from urllib.parse import unquote
import getopt
import seaskirt


run_done = None

def set_run_done() :
    if not run_done.done() :
        run_done.set_result(None)

def interrupted(signum, frame) :
    if run_done != None :
        sys.stderr.write("setting run_done\n")
        run_done.get_loop().call_soon_threadsafe(set_run_done)

poll_delay = 0.25

signal.signal(signal.SIGTERM, interrupted) 
signal.signal(signal.SIGINT, interrupted) 

tempdir = tempfile.mkdtemp(prefix = "aster-audio-player")
debug = True
sys.stderr.write("tempdir = %s\n" % tempdir)

pipe_seq = 0

async def main() :
    global run_done, pipe_seq
    children = []
    run_done = asyncio.get_running_loop().create_future()

    mgr = await seaskirt.ManagerAsync(username = 'pbxuser', password = '1234', want_events = True, debug = True)
    last_flush = 0
    while True :
        evt = asyncio.create_task \
          (
            mgr.get_response(max(poll_delay + last_flush - time.monotonic(), 0))
          )
        await asyncio.wait([evt, run_done], return_when = asyncio.FIRST_COMPLETED)
        if run_done.done() :
            evt.cancel()
            break

        assert evt.done()
        evt = evt.result()
        if evt != None :
            if debug or "Event" in evt :
                sys.stderr.write \
                  (
                        "Event: {%s}\n"
                    %
                        (
                            ", ".join
                              (
                                "%s : %s" % (repr(key), repr(evt[key]))
                                for key in sorted(evt.keys())
                              )
                        )
                  )

            if evt.get("Event") == "AsyncAGIStart" :
                envx = unquote(evt.get("Env"))
                for i in range(len(envx)-2, 0, -1):
                    if envx[i] == ':' and envx[i+1] == ' ':
                        input_url = envx[i+2:]
                        break
                input_url = f'"{input_url[:-2]}"'
                print('LOOK')
                print('-----------------------------------------------------------------')
                print(input_url)
                print('-----------------------------------------------------------------')
                pipe_seq += 1
                outpipe_base = "/var/lib/asterisk/sounds/en/custom/" + "%0.6d" % pipe_seq
                outpipe_full = outpipe_base + ".gsm"
                os.system(f'touch {outpipe_full}')

                # input_url = "https://api.play.ht/api/v2/tts/AEBO5kmsZxSGoOIzyl?format=audio-mpeg"
                
                child = subprocess.Popen(
                    f"ffmpeg -headers $'AUTHORIZATION: **token**\r\nX-USER-ID: **userid**\r\n' -i {input_url} -f gsm -b:a 13k -c:a gsm -af 'volume=3' {outpipe_full} -y",
                    shell=True,
                    stdin = subprocess.DEVNULL,
                    stdout = subprocess.DEVNULL,
                )

                print('LOOK1')
                print('-----------------------------------------------------------------')
                out,err = child.communicate()
                print(out)
                print('-----------------------------------------------------------------')

                await mgr.send_request(
                    action = "AGI",
                    parms = {
                        "Channel" : evt["Channel"],
                        "Command" : "VERBOSE \"Play audio for extension \"",
                    }
                )
                await mgr.send_request(
                    action = "AGI",
                    parms = {
                        "Channel" : evt["Channel"],
                        "Command" : "STREAM FILE \"%s\" \"\"" % outpipe_base,
                    }
                )
                children.append({
                    "channel" : evt["Channel"],
                    "proc" : child,
                    "outpipe_base" : outpipe_base,
                    "outpipe_full" : outpipe_full,
                    "done_output" : False,
                    "waited" : False,
                })
                sys.stderr.write("Started playback on channel %s\n" % evt["Channel"])

            elif evt.get("Event") == "AGIExecEnd" and evt["Command"].startswith("STREAM FILE") :
                child = tuple \
                  (
                    (i, c)
                    for i, c in enumerate(children)
                    if c["channel"] == evt["Channel"]

                  )
                if len(child) > 0 :
                    (i, child), = child
                    sys.stderr.write("Ending playback on channel %s\n" % child["channel"])
                    await mgr.send_request \
                      (
                        action = "AGI",
                        parms =
                            {
                                "Channel" : child["channel"],
                                "Command" : "ASYNCAGI BREAK",
                            }
                      )
                    child["done_output"] = True
                    if child["waited"] :
                        os.unlink(child["outpipe_full"])
                        children.pop(i)
                    else :

                        child["proc"].kill()

                else :
                    sys.stderr.write("AGIExecEnd not on one of my channels: %s\n" % evt["Channel"])

        now = time.monotonic()
        if now - last_flush >= poll_delay :
            sys.stderr.flush() 
            try :
                waited = os.waitpid(-1, os.WNOHANG)
            except ChildProcessError :
                waited = (0, 0)

            if waited[0] != 0 :
                child = tuple((i, c) for i, c in enumerate(children) if c["proc"].pid == waited[0])

                if len(child) > 0 :
                    (i, child), = child
                    if debug or waited[1] != 0 :
                        sys.stderr.write("child pid %d terminated with status %d\n" % waited)

                    child["waited"] = True
                    if child["done_output"] :
                        os.unlink(child["outpipe_full"])
                        children.pop(i)

                else :
                    sys.stderr.write("child pid %d, status %d is not one of mine\n" % waited)

            last_flush = now

    await mgr.close()

asyncio.run(main())

shutil.rmtree(tempdir)