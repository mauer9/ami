import sys
import os
import time
import signal
import subprocess
import tempfile
import shutil
import re
import asyncio
import urllib.parse
import getopt
import seaskirt

AUDIO_DIR = os.path.join(os.path.split(sys.argv[0])[0], "audio")
audio_files = {}

def collect_audio_files() :
    for item in os.listdir(AUDIO_DIR) :
        match = re.search(r"^([0-9]+)(?:\..*)$", item)
        if match != None :
            exten = match.group(1)
            if exten in AUDIO_DIR :
                sys.stderr.write \
                  (
                        "ignore duplicate exten “%s” for file “%s” (already got “%s”)"
                    %
                        (exten, os.path.join(AUDIO_DIR, item), audio_files[exten])
                  )
            else :
                audio_files[exten] = os.path.join(AUDIO_DIR, item)

        else :
            sys.stderr.write("ignore non-media file “%s”" % os.path.join(AUDIO_DIR, item))

run_done = None

def set_run_done() :
    if not run_done.done() :
        run_done.set_result(None)

def interrupted(signum, frame) :
    if run_done != None :
        sys.stderr.write("setting run_done\n")
        run_done.get_loop().call_soon_threadsafe(set_run_done)

poll_delay = 0.25

collect_audio_files()
sys.stderr.write("audio_files = %s\n" % repr(audio_files)) 
if len(audio_files) == 0 :
    raise getopt.GetoptError("no audio files found")

signal.signal(signal.SIGTERM, interrupted) 
signal.signal(signal.SIGINT, interrupted) 

tempdir = tempfile.mkdtemp(prefix = "aster-audio-player")
debug = True
sys.stderr.write("tempdir = %s\n" % tempdir)

pipe_seq = 0

async def main() :
    global run_done, pipe_seq
    children = []
    run_done = asyncio.get_running_loop().create_future()

    mgr = await seaskirt.ManagerAsync(username = 'pbxuser', password = '1234', want_events = True, debug = True)
    last_flush = 0
    while True :
        evt = asyncio.create_task \
          (
            mgr.get_response(max(poll_delay + last_flush - time.monotonic(), 0))
          )
        await asyncio.wait([evt, run_done], return_when = asyncio.FIRST_COMPLETED)
        if run_done.done() :
            evt.cancel()
            break

        assert evt.done()
        evt = evt.result()
        if evt != None :
            if debug or "Event" in evt :
                sys.stderr.write \
                  (
                        "Event: {%s}\n"
                    %
                        (
                            ", ".join
                              (
                                "%s : %s" % (repr(key), repr(evt[key]))
                                for key in sorted(evt.keys())
                              )
                        )
                  )

            if evt.get("Event") == "AsyncAGIStart" :
                env = dict \
                  (
                    l.split(": ", 1)
                    for l in urllib.parse.unquote(evt["Env"]).rstrip("\x0a").split("\x0a")
                  )
                if debug :
                    sys.stderr.write("evt env = %s\n" % repr(env))

                if env["agi_arg_1"] == "audio-player" :
                    audio_file = audio_files.get('123')
                    if audio_file != None :
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" :
                                            "VERBOSE \"Play audio for extension %s\"' 3"
                                        %
                                            repr(evt["Exten"]),
                                }
                          )
                        pipe_seq += 1
                        # outpipe_base = os.path.join(tempdir, "%0.6d" % pipe_seq)
                        outpipe_base = "/var/lib/asterisk/sounds/en/custom/" + "%0.6d" % pipe_seq

                        outpipe_full = outpipe_base + ".mp3"

                        os.mkfifo(outpipe_full, mode = 0o600)

                        print('LOOKATHERE')
                        print('-------------')
                        print('subprocess started')
                        input_url = "https://api.play.ht/api/v2/tts/g3b0exLTTzVOFB1INa;kNV7FPcCE7eWcUb15h?format=audio-mpeg"
                        child = subprocess.Popen(
                            args =
                            (
                                'ffmpeg','-headers',
                                "AUTHORIZATION: **token**\r\nX-USER-ID: **userid**\r\n",
                                '-i', input_url,
                                '-f', 'mp3', '-c:a', 'mp3', '-af', 'volume=10', outpipe_full, '-y'
                            ),
                            stdin = subprocess.DEVNULL,
                            stdout = subprocess.DEVNULL,
                        )
                        print('LOOKATHERE')
                        print('-------------')
                        os.system(f"ls {tempdir}")
                        print('-------------')
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" : "ANSWER",
                                }
                          )
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" : "STREAM FILE \"%s\" \"\"" % outpipe_base,
                                }
                          )
                        children.append \
                          (
                            {
                                "channel" : evt["Channel"],
                                "proc" : child,
                                "outpipe_base" : outpipe_base,
                                "outpipe_full" : outpipe_full,
                                "done_output" : False,
                                "waited" : False,
                            }
                          )
                        sys.stderr.write("Started playback on channel %s\n" % evt["Channel"])
                    else :
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" :
                                        "VERBOSE \"No such extension %s\"' 3" % repr(evt["Exten"]),
                                }
                          )
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" : "HANGUP",

                                }
                          )

                else :
                    sys.stderr.write(" -- event not for me\n")

            elif evt.get("Event") == "AGIExecEnd" and evt["Command"].startswith("STREAM FILE") :
                child = tuple \
                  (
                    (i, c)
                    for i, c in enumerate(children)
                    if c["channel"] == evt["Channel"]

                  )
                if len(child) > 0 :
                    (i, child), = child
                    sys.stderr.write("Ending playback on channel %s\n" % child["channel"])
                    await mgr.send_request \
                      (
                        action = "AGI",
                        parms =
                            {
                                "Channel" : child["channel"],
                                "Command" : "ASYNCAGI BREAK",
                            }
                      )
                    child["done_output"] = True
                    if child["waited"] :
                        os.unlink(child["outpipe_full"])
                        children.pop(i)
                    else :

                        child["proc"].kill()

                else :
                    sys.stderr.write("AGIExecEnd not on one of my channels: %s\n" % evt["Channel"])

        now = time.monotonic()
        if now - last_flush >= poll_delay :
            sys.stderr.flush() 
            try :
                waited = os.waitpid(-1, os.WNOHANG)
            except ChildProcessError :
                waited = (0, 0)

            if waited[0] != 0 :
                child = tuple((i, c) for i, c in enumerate(children) if c["proc"].pid == waited[0])

                if len(child) > 0 :
                    (i, child), = child
                    if debug or waited[1] != 0 :
                        sys.stderr.write("child pid %d terminated with status %d\n" % waited)

                    child["waited"] = True
                    if child["done_output"] :
                        os.unlink(child["outpipe_full"])
                        children.pop(i)

                else :
                    sys.stderr.write("child pid %d, status %d is not one of mine\n" % waited)

            last_flush = now

    await mgr.close()

asyncio.run(main())

shutil.rmtree(tempdir)